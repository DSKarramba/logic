// Generated by CoffeeScript 1.4.0
var And, BTRI, Input, JK, NULL, Node, Not, ONE, OR, Output, RS, Wire, Z, clear, connected_nodes, ctx, dark, draw_text, el, elem, i, inp, input, input_data, logics, node, nodes, out, output, state_from_value, wire, wires, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _m, _n, _o, _p, _q, _r, _ref, _ref1;

ONE = {
  value: 1,
  text: "1",
  color: "#f5bb15"
};

NULL = {
  value: 0,
  text: "0",
  color: "#15bbf5"
};

Z = {
  value: -1,
  text: "Z",
  color: "#f515bb"
};

dark = function(color) {
  switch (color) {
    case "#f5bb15":
      return "#b38400";
    case "#15bbf5":
      return "#0084b3";
    default:
      return "#b30084";
  }
};

state_from_value = function(value) {
  var state;
  if (!value) {
    state = NULL;
  } else if (value > 0) {
    state = ONE;
  } else {
    state = Z;
  }
  return state;
};

Node = (function() {

  function Node(ctx, x, y) {
    this.ctx = ctx;
    this.x = x;
    this.y = y;
    this.visible = false;
    this.state = NULL;
    this.connected = false;
    this.wires = [];
    this.element = false;
  }

  Node.prototype.add_wire = function(wire) {
    return this.wires.push(wire);
  };

  Node.prototype.get_wires = function() {
    return this.wires;
  };

  Node.prototype.draw = function() {
    if (this.visible) {
      this.ctx.strokeStyle = dark(this.state.color);
      this.ctx.fillStyle = this.state.color;
      this.ctx.lineWidth = 1;
      this.ctx.beginPath();
      this.ctx.arc(this.x, this.y, 4, 0, Math.PI * 2, true);
      this.ctx.closePath();
      this.ctx.fill();
      return this.ctx.stroke();
    }
  };

  return Node;

})();

Wire = (function() {

  function Wire(ctx, start_node, end_node) {
    this.ctx = ctx;
    this.start_node = start_node;
    this.end_node = end_node;
    this.start_node.add_wire(this);
    this.end_node.add_wire(this);
  }

  Wire.prototype.link = function() {
    this.end_node.state = this.start_node.state;
    return this.end_node.connected = true;
  };

  Wire.prototype.draw = function() {
    this.ctx.strokeStyle = dark(this.end_node.state.color);
    this.ctx.lineWidth = 1;
    this.ctx.fillStyle = this.end_node.state.color;
    this.ctx.beginPath();
    this.ctx.rect(this.start_node.x - 2, this.start_node.y - 2, this.end_node.x - this.start_node.x + 4, this.end_node.y - this.start_node.y + 4);
    this.ctx.closePath();
    this.ctx.fill();
    return this.ctx.stroke();
  };

  return Wire;

})();

Input = (function() {

  function Input(ctx, node) {
    this.ctx = ctx;
    this.node = node;
  }

  Input.prototype.sync = function() {
    this.node.state = this.state;
    return this.node.connected = true;
  };

  Input.prototype.set_state = function(state) {
    this.state = state;
    return this.sync();
  };

  Input.prototype.draw = function() {
    this.ctx.lineWidth = 1;
    this.ctx.strokeStyle = dark(this.node.state.color);
    this.ctx.fillStyle = this.node.state.color;
    this.ctx.beginPath();
    this.ctx.arc(this.node.x, this.node.y, 11, 0, Math.PI * 2, true);
    this.ctx.closePath();
    this.ctx.fill();
    this.ctx.stroke();
    this.ctx.fillStyle = '#000';
    this.ctx.textAlign = 'center';
    return this.ctx.fillText(this.state.text, this.node.x, this.node.y);
  };

  return Input;

})();

Output = (function() {

  function Output(ctx, node) {
    this.ctx = ctx;
    this.node = node;
  }

  Output.prototype.sync = function() {
    this.state = this.node.state;
    return this.node.connected = true;
  };

  Output.prototype.draw = function() {
    this.ctx.beginPath();
    this.ctx.arc(this.node.x, this.node.y, 11, 0, Math.PI * 2, true);
    this.ctx.closePath();
    this.ctx.fillStyle = this.node.state.color;
    this.ctx.fill();
    this.ctx.lineWidth = 1;
    this.ctx.strokeStyle = dark(this.node.state.color);
    this.ctx.stroke();
    this.ctx.fillStyle = '#000';
    this.ctx.textAlign = 'center';
    return this.ctx.fillText(this.state.text, this.node.x, this.node.y);
  };

  return Output;

})();

Not = (function() {

  function Not(ctx, _in, out) {
    this.ctx = ctx;
    this["in"] = _in;
    this.out = out;
    this.name = "Not";
    this["in"].element = this;
    this.out.element = this;
  }

  Not.prototype.sync = function() {
    switch (this["in"].state) {
      case ONE:
        this.out.state = NULL;
        break;
      case NULL:
        this.out.state = ONE;
        break;
      default:
        this.out.state = Z;
    }
    return this.out.connected = true;
  };

  Not.prototype.is_ready = function() {
    return this["in"].connected;
  };

  Not.prototype.draw = function() {
    this.ctx.beginPath();
    this.ctx.lineWidth = 2;
    this.ctx.strokeStyle = '#000';
    this.ctx.moveTo(this["in"].x, this["in"].y);
    this.ctx.lineTo(this["in"].x, this["in"].y - 23);
    this.ctx.lineTo(this["in"].x + 46, this["in"].y);
    this.ctx.lineTo(this["in"].x, this["in"].y + 23);
    this.ctx.lineTo(this["in"].x, this["in"].y);
    this.ctx.closePath();
    this.ctx.moveTo(this["in"].x + 60, this["in"].y);
    this.ctx.arc(this["in"].x + 53, this["in"].y, 7, 0, Math.PI * 2, true);
    this.ctx.stroke();
    this.ctx.beginPath();
    this.ctx.arc(this["in"].x + 53, this["in"].y, 6, 0, Math.PI * 2, true);
    this.ctx.closePath();
    this.ctx.fillStyle = this.out.state.color;
    this.ctx.fill();
    this["in"].visible = true;
    return this["in"].draw();
  };

  return Not;

})();

And = (function() {

  function And(ctx, in_0, in_1, out) {
    this.ctx = ctx;
    this.in_0 = in_0;
    this.in_1 = in_1;
    this.out = out;
    this.name = "And";
    this.in_0.element = this;
    this.in_1.element = this;
    this.out.element = this;
  }

  And.prototype.sync = function() {
    if ((this.in_0.state === Z) || (this.in_1.state === Z)) {
      this.out.state = NULL;
    } else {
      this.out.state = state_from_value(this.in_0.state.value * this.in_1.state.value);
    }
    return this.out.connected = true;
  };

  And.prototype.is_ready = function() {
    return this.in_0.get_wires()[0].connected && this.in_1.get_wires()[0].connected;
  };

  And.prototype.draw = function() {
    this.ctx.strokeStyle = '#000';
    this.ctx.lineWidth = 2;
    this.ctx.beginPath();
    this.ctx.moveTo(this.in_0.x, this.in_0.y);
    this.ctx.lineTo(this.in_0.x, this.in_0.y - 10);
    this.ctx.lineTo(this.in_0.x + 35, this.in_0.y - 10);
    this.ctx.bezierCurveTo(this.out.x + 8, this.out.y - 20, this.out.x + 8, this.out.y + 20, this.in_0.x + 35, this.in_1.y + 10);
    this.ctx.lineTo(this.in_0.x, this.in_1.y + 10);
    this.ctx.lineTo(this.in_0.x, this.in_0.y);
    this.ctx.closePath();
    this.ctx.stroke();
    this.in_0.visible = true;
    this.in_0.draw();
    this.in_1.visible = true;
    this.in_1.draw();
    this.out.visible = true;
    return this.out.draw();
  };

  return And;

})();

OR = (function() {

  function OR(ctx, in_0, in_1, out) {
    this.ctx = ctx;
    this.in_0 = in_0;
    this.in_1 = in_1;
    this.out = out;
    if ((this.in_0.state === Z) && (this.in_1.state === Z)) {
      this.out.state = Z;
    } else if ((this.in_0.state === Z) && (this.in_1.state !== Z)) {
      this.out.state = this.in_1.state;
    } else if ((this.in_0.state !== Z) && (this.in_1.state === Z)) {
      this.out.state = this.in_0.state;
    } else {
      this.out.state = state_from_value(this.in_0.state.value + this.in_1.state.value);
    }
  }

  OR.prototype.draw = function() {
    this.ctx.strokeStyle = '#000';
    this.ctx.lineWidth = 2;
    this.ctx.beginPath();
    this.ctx.moveTo(this.in_0.x - 10, this.in_0.y - 10);
    this.ctx.bezierCurveTo(this.in_0.x + 8, this.out.y - 20, this.in_0.x + 8, this.out.y + 20, this.in_0.x - 10, this.in_1.y + 10);
    this.ctx.bezierCurveTo(this.in_0.x + 30, this.in_1.y + 10, this.out.x - 15, this.out.y + 20, this.out.x, this.out.y);
    this.ctx.moveTo(this.in_0.x - 10, this.in_0.y - 10);
    this.ctx.bezierCurveTo(this.in_0.x + 30, this.in_0.y - 10, this.out.x - 15, this.out.y - 20, this.out.x, this.out.y);
    this.ctx.moveTo(this.in_0.x - 10, this.in_0.y - 10);
    this.ctx.closePath();
    this.ctx.stroke();
    this.in_0.visible = true;
    this.in_0.draw();
    this.in_1.visible = true;
    this.in_1.draw();
    this.out.visible = true;
    return this.out.draw();
  };

  return OR;

})();

JK = (function() {

  function JK(ctx, J, K, C, Q) {
    this.ctx = ctx;
    this.J = J;
    this.K = K;
    this.C = C;
    this.Q = Q != null ? Q : NULL;
    if (this.C.state) {
      if ((this.J.state === Z) || (this.K.state === Z)) {
        this.Q.state = Z;
      } else {
        this.Q.state = state_from_value((1 - this.Q.state.value) * this.J.state.value + this.Q.state.value * (1 - this.K.state.value));
      }
    }
  }

  JK.prototype.draw = function() {
    this.ctx.strokeStyle = '#000';
    this.ctx.lineWidth = 2;
    this.ctx.textAlign = 'center';
    this.ctx.strokeRect(this.J.x, this.J.y - 20, 60, 100);
    this.ctx.fillStyle = "#000";
    this.ctx.fillText("J", this.J.x + 10, this.J.y);
    this.ctx.fillText("K", this.K.x + 10, this.K.y);
    this.ctx.fillText("C", this.C.x + 10, this.C.y);
    this.ctx.fillText("Q", this.Q.x - 11, this.Q.y);
    this.ctx.fillText("JK", this.J.x + 30, this.C.y);
    this.ctx.lineWidth = 0.3;
    this.ctx.beginPath();
    this.ctx.moveTo(this.J.x + 18, this.J.y - 20);
    this.ctx.lineTo(this.J.x + 18, this.K.y + 20);
    this.ctx.moveTo(this.Q.x - 18, this.K.y + 20);
    this.ctx.lineTo(this.Q.x - 18, this.J.y - 20);
    this.ctx.moveTo(this.Q.x - 18, this.K.y - 20);
    this.ctx.closePath();
    this.ctx.stroke();
    this.J.visible = true;
    this.J.draw();
    this.K.visible = true;
    this.K.draw();
    this.C.visible = true;
    this.C.draw();
    this.Q.visible = true;
    return this.Q.draw();
  };

  return JK;

})();

RS = (function() {

  function RS(ctx, S, R, C, Q) {
    this.ctx = ctx;
    this.S = S;
    this.R = R;
    this.C = C;
    this.Q = Q != null ? Q : NULL;
    if (this.C.state) {
      if ((this.R.state === Z) || (this.S.state === Z) || (this.R.state === ONE) && (this.S.state === ONE)) {
        this.Q.state = Z;
      } else {
        this.Q.state = this.S.state;
      }
    }
  }

  RS.prototype.draw = function() {
    this.ctx.strokeStyle = '#000';
    this.ctx.lineWidth = 2;
    this.ctx.textAlign = 'center';
    this.ctx.strokeRect(this.S.x, this.S.y - 20, 60, 100);
    this.ctx.fillStyle = "#000";
    this.ctx.fillText("S", this.S.x + 10, this.S.y);
    this.ctx.fillText("R", this.R.x + 10, this.R.y);
    this.ctx.fillText("C", this.C.x + 10, this.C.y);
    this.ctx.fillText("Q", this.Q.x - 11, this.Q.y);
    this.ctx.fillText("RS", this.S.x + 30, this.C.y);
    this.ctx.lineWidth = 0.3;
    this.ctx.beginPath();
    this.ctx.moveTo(this.S.x + 18, this.S.y - 20);
    this.ctx.lineTo(this.S.x + 18, this.R.y + 20);
    this.ctx.moveTo(this.Q.x - 18, this.R.y + 20);
    this.ctx.lineTo(this.Q.x - 18, this.S.y - 20);
    this.ctx.moveTo(this.Q.x - 18, this.R.y - 20);
    this.ctx.closePath();
    this.ctx.stroke();
    this.S.visible = true;
    this.S.draw();
    this.R.visible = true;
    this.R.draw();
    this.C.visible = true;
    this.C.draw();
    this.Q.visible = true;
    return this.Q.draw();
  };

  return RS;

})();

BTRI = (function() {

  function BTRI(ctx, _in, oen, out) {
    this.ctx = ctx;
    this["in"] = _in;
    this.oen = oen;
    this.out = out;
    if ((this.oen.state === NULL) || (this.oen.state === Z)) {
      this.out.state = this["in"].state;
    } else {
      this.out.state = Z;
    }
  }

  BTRI.prototype.draw = function() {
    if (this.oen.state === Z) {
      this.ctx.fillStyle = ONE.color;
      this.ctx.strokeStyle = Z.color;
    } else {
      this.ctx.fillStyle = this.oen.state === NOT ? ONE.color : NULL.color;
      this.ctx.strokeStyle = this.ctx.fillStyle;
    }
    this.ctx.beginPath();
    this.ctx.lineWidth = 4;
    this.ctx.moveTo(this.oen.x, this.oen.y);
    this.ctx.lineTo(this["in"].x + 15, this["in"].y + 10);
    this.ctx.closePath();
    this.ctx.stroke();
    this.ctx.beginPath();
    this.ctx.lineWidth = 2;
    this.ctx.strokeStyle = '#000';
    this.ctx.moveTo(this["in"].x, this["in"].y);
    this.ctx.lineTo(this["in"].x, this["in"].y - 16);
    this.ctx.lineTo(this["in"].x + 30, this["in"].y);
    this.ctx.lineTo(this["in"].x, this["in"].y + 16);
    this.ctx.lineTo(this["in"].x, this["in"].y);
    this.ctx.closePath();
    this.ctx.moveTo(this["in"].x + 15, this["in"].y + 10);
    this.ctx.arc(this["in"].x + 15, this["in"].y + 10, 5, 0, Math.PI * 2, true);
    this.ctx.stroke();
    this.ctx.beginPath();
    this.ctx.arc(this["in"].x + 15, this["in"].y + 10, 4, 0, Math.PI * 2, true);
    this.ctx.closePath();
    this.ctx.fill();
    this["in"].visible = true;
    this["in"].draw();
    this.out.visible = true;
    this.out.draw();
    this.oen.visible = true;
    return this.oen.draw();
  };

  return BTRI;

})();

draw_text = function(ctx, x, y, text) {
  ctx.fillStyle = "#000";
  ctx.textAlign = 'left';
  return ctx.fillText(text, x, y);
};

clear = function(ctx) {
  return ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
};

ctx = document.getElementById('examples').getContext('2d');

ctx.font = '11pt PT Sans';

ctx.textBaseline = 'middle';

wires = [];

el = [];

nodes = [new Node(ctx, 50, 40), new Node(ctx, 100, 40), new Node(ctx, 153, 40), new Node(ctx, 210, 40), new Node(ctx, 50, 85), new Node(ctx, 170, 85, 1), new Node(ctx, 170, 70, 1), new Node(ctx, 210, 70), new Node(ctx, 270, 55), new Node(ctx, 320, 55)];

input = [new Input(ctx, nodes[0]), new Input(ctx, nodes[4])];

wires = [new Wire(ctx, nodes[0], nodes[1]), new Wire(ctx, nodes[2], nodes[3]), new Wire(ctx, nodes[4], nodes[5]), new Wire(ctx, nodes[5], nodes[6]), new Wire(ctx, nodes[6], nodes[7]), new Wire(ctx, nodes[8], nodes[9])];

logics = [new Not(ctx, nodes[1], nodes[2]), new And(ctx, nodes[3], nodes[7], nodes[8])];

output = [new Output(ctx, nodes[9])];

clear(ctx);

input_data = [ONE, NULL];

for (_i = 0, _len = input.length; _i < _len; _i++) {
  inp = input[_i];
  inp.set_state(input_data[0]);
}

connected_nodes = [];

for (_j = 0, _len1 = input.length; _j < _len1; _j++) {
  inp = input[_j];
  connected_nodes.push(inp.node);
}

for (i = _k = 0, _ref = nodes.length - 1; 0 <= _ref ? _k <= _ref : _k >= _ref; i = 0 <= _ref ? ++_k : --_k) {
  node = connected_nodes[i];
  if (node.element !== false) {
    if (node.element.is_ready()) {
      node.element.sync();
      connected_nodes.push(node.element.out);
    }
  } else {
    _ref1 = node.get_wires();
    for (_l = 0, _len2 = _ref1.length; _l < _len2; _l++) {
      wire = _ref1[_l];
      if (!wire.end_node.connected) {
        wire.link();
        connected_nodes.push(wire.end_node);
      }
    }
  }
}

for (_m = 0, _len3 = output.length; _m < _len3; _m++) {
  out = output[_m];
  out.sync();
}

for (_n = 0, _len4 = wires.length; _n < _len4; _n++) {
  wire = wires[_n];
  wire.draw();
}

for (_o = 0, _len5 = input.length; _o < _len5; _o++) {
  elem = input[_o];
  elem.draw();
}

for (_p = 0, _len6 = logics.length; _p < _len6; _p++) {
  elem = logics[_p];
  elem.draw();
}

for (_q = 0, _len7 = output.length; _q < _len7; _q++) {
  elem = output[_q];
  elem.draw();
}

for (_r = 0, _len8 = nodes.length; _r < _len8; _r++) {
  node = nodes[_r];
  node.draw();
}
