// Generated by CoffeeScript 1.4.0
var And, BTRI, Input, JK, Node, Not, OFF, ON, OR, Output, RS, Wire, Z, clear, draw_text, example, reload, state_from_value;

ON = {
  value: 1,
  text: "1",
  color: "#f5bb15"
};

OFF = {
  value: 0,
  text: "0",
  color: "#15bbf5"
};

Z = {
  value: -1,
  text: "Z",
  color: "#f515bb"
};

state_from_value = function(value) {
  var state;
  if (!value) {
    state = OFF;
  } else if (value > 0) {
    state = ON;
  } else {
    state = Z;
  }
  return state;
};

Node = (function() {

  function Node(ctx, x, y, visible, state) {
    this.ctx = ctx;
    this.x = x;
    this.y = y;
    this.visible = visible != null ? visible : false;
    this.state = state != null ? state : OFF;
  }

  Node.prototype.draw = function() {
    if (this.visible) {
      this.ctx.beginPath();
      this.ctx.arc(this.x, this.y, 4, 0, Math.PI * 2, true);
      this.ctx.closePath();
      this.ctx.fillStyle = this.state.color;
      return this.ctx.fill();
    }
  };

  return Node;

})();

Wire = (function() {

  function Wire(ctx, start_node, end_node) {
    this.ctx = ctx;
    this.start_node = start_node;
    this.end_node = end_node;
    this.end_node.state = this.start_node.state;
  }

  Wire.prototype.draw = function() {
    this.ctx.lineWidth = 4;
    this.ctx.strokeStyle = this.end_node.state.color;
    this.ctx.beginPath();
    this.ctx.moveTo(this.start_node.x, this.start_node.y);
    this.ctx.lineTo(this.end_node.x, this.end_node.y);
    this.ctx.closePath();
    return this.ctx.stroke();
  };

  return Wire;

})();

Input = (function() {

  function Input(ctx, node, state) {
    this.ctx = ctx;
    this.node = node;
    this.state = state;
    this.node.state = this.state;
  }

  Input.prototype.draw = function() {
    this.ctx.beginPath();
    this.ctx.arc(this.node.x, this.node.y, 11, 0, Math.PI * 2, true);
    this.ctx.closePath();
    this.ctx.fillStyle = this.node.state.color;
    this.ctx.fill();
    this.ctx.beginPath();
    this.ctx.arc(this.node.x, this.node.y, 11, 0, Math.PI * 2, true);
    this.ctx.closePath();
    this.ctx.lineWidth = 2;
    this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)';
    this.ctx.stroke();
    this.ctx.fillStyle = '#000';
    this.ctx.textAlign = 'center';
    return this.ctx.fillText(this.state.text, this.node.x, this.node.y);
  };

  return Input;

})();

Output = (function() {

  function Output(ctx, node) {
    this.ctx = ctx;
    this.node = node;
    this.state = this.node.state;
  }

  Output.prototype.draw = function() {
    this.ctx.beginPath();
    this.ctx.arc(this.node.x, this.node.y, 11, 0, Math.PI * 2, true);
    this.ctx.closePath();
    this.ctx.fillStyle = this.node.state.color;
    this.ctx.fill();
    this.ctx.beginPath();
    this.ctx.arc(this.node.x, this.node.y, 11, 0, Math.PI * 2, true);
    this.ctx.closePath();
    this.ctx.lineWidth = 2;
    this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)';
    this.ctx.stroke();
    this.ctx.fillStyle = '#000';
    this.ctx.textAlign = 'center';
    return this.ctx.fillText(this.state.text, this.node.x, this.node.y);
  };

  return Output;

})();

Not = (function() {

  function Not(ctx, _in, out) {
    this.ctx = ctx;
    this["in"] = _in;
    this.out = out;
    switch (this["in"].state) {
      case ON:
        this.out.state = OFF;
        break;
      case OFF:
        this.out.state = ON;
        break;
      default:
        this.out.state = Z;
    }
  }

  Not.prototype.draw = function() {
    this.ctx.beginPath();
    this.ctx.lineWidth = 2;
    this.ctx.strokeStyle = '#000';
    this.ctx.moveTo(this["in"].x, this["in"].y);
    this.ctx.lineTo(this["in"].x, this["in"].y - 23);
    this.ctx.lineTo(this["in"].x + 46, this["in"].y);
    this.ctx.lineTo(this["in"].x, this["in"].y + 23);
    this.ctx.lineTo(this["in"].x, this["in"].y);
    this.ctx.closePath();
    this.ctx.moveTo(this["in"].x + 60, this["in"].y);
    this.ctx.arc(this["in"].x + 53, this["in"].y, 7, 0, Math.PI * 2, true);
    this.ctx.stroke();
    this.ctx.beginPath();
    this.ctx.arc(this["in"].x + 53, this["in"].y, 6, 0, Math.PI * 2, true);
    this.ctx.closePath();
    this.ctx.fillStyle = this.out.state.color;
    this.ctx.fill();
    this["in"].visible = true;
    return this["in"].draw();
  };

  return Not;

})();

And = (function() {

  function And(ctx, in_0, in_1, out) {
    this.ctx = ctx;
    this.in_0 = in_0;
    this.in_1 = in_1;
    this.out = out;
    if ((this.in_0.state === Z) || (this.in_1.state === Z)) {
      this.out.state = OFF;
    } else {
      this.out.state = state_from_value(this.in_0.state.value * this.in_1.state.value);
    }
  }

  And.prototype.draw = function() {
    this.ctx.strokeStyle = '#000';
    this.ctx.lineWidth = 2;
    this.ctx.beginPath();
    this.ctx.moveTo(this.in_0.x, this.in_0.y);
    this.ctx.lineTo(this.in_0.x, this.in_0.y - 10);
    this.ctx.lineTo(this.in_0.x + 35, this.in_0.y - 10);
    this.ctx.bezierCurveTo(this.out.x + 8, this.out.y - 20, this.out.x + 8, this.out.y + 20, this.in_0.x + 35, this.in_1.y + 10);
    this.ctx.lineTo(this.in_0.x, this.in_1.y + 10);
    this.ctx.lineTo(this.in_0.x, this.in_0.y);
    this.ctx.closePath();
    this.ctx.stroke();
    this.in_0.visible = true;
    this.in_0.draw();
    this.in_1.visible = true;
    this.in_1.draw();
    this.out.visible = true;
    return this.out.draw();
  };

  return And;

})();

OR = (function() {

  function OR(ctx, in_0, in_1, out) {
    this.ctx = ctx;
    this.in_0 = in_0;
    this.in_1 = in_1;
    this.out = out;
    if ((this.in_0.state === Z) && (this.in_1.state === Z)) {
      this.out.state = Z;
    } else if ((this.in_0.state === Z) && (this.in_1.state !== Z)) {
      this.out.state = this.in_1.state;
    } else if ((this.in_0.state !== Z) && (this.in_1.state === Z)) {
      this.out.state = this.in_0.state;
    } else {
      this.out.state = state_from_value(this.in_0.state.value + this.in_1.state.value);
    }
  }

  OR.prototype.draw = function() {
    this.ctx.strokeStyle = '#000';
    this.ctx.lineWidth = 2;
    this.ctx.beginPath();
    this.ctx.moveTo(this.in_0.x - 10, this.in_0.y - 10);
    this.ctx.bezierCurveTo(this.in_0.x + 8, this.out.y - 20, this.in_0.x + 8, this.out.y + 20, this.in_0.x - 10, this.in_1.y + 10);
    this.ctx.bezierCurveTo(this.in_0.x + 30, this.in_1.y + 10, this.out.x - 15, this.out.y + 20, this.out.x, this.out.y);
    this.ctx.moveTo(this.in_0.x - 10, this.in_0.y - 10);
    this.ctx.bezierCurveTo(this.in_0.x + 30, this.in_0.y - 10, this.out.x - 15, this.out.y - 20, this.out.x, this.out.y);
    this.ctx.moveTo(this.in_0.x - 10, this.in_0.y - 10);
    this.ctx.closePath();
    this.ctx.stroke();
    this.in_0.visible = true;
    this.in_0.draw();
    this.in_1.visible = true;
    this.in_1.draw();
    this.out.visible = true;
    return this.out.draw();
  };

  return OR;

})();

JK = (function() {

  function JK(ctx, J, K, C, Q) {
    this.ctx = ctx;
    this.J = J;
    this.K = K;
    this.C = C;
    this.Q = Q != null ? Q : OFF;
    if (this.C.state) {
      if ((this.J.state === Z) || (this.K.state === Z)) {
        this.Q.state = Z;
      } else {
        this.Q.state = state_from_value((1 - this.Q.state.value) * this.J.state.value + this.Q.state.value * (1 - this.K.state.value));
      }
    }
  }

  JK.prototype.draw = function() {
    this.ctx.strokeStyle = '#000';
    this.ctx.lineWidth = 2;
    this.ctx.textAlign = 'center';
    this.ctx.strokeRect(this.J.x, this.J.y - 20, 60, 100);
    this.ctx.fillStyle = "#000";
    this.ctx.fillText("J", this.J.x + 10, this.J.y);
    this.ctx.fillText("K", this.K.x + 10, this.K.y);
    this.ctx.fillText("C", this.C.x + 10, this.C.y);
    this.ctx.fillText("Q", this.Q.x - 11, this.Q.y);
    this.ctx.fillText("JK", this.J.x + 30, this.C.y);
    this.ctx.lineWidth = 0.3;
    this.ctx.beginPath();
    this.ctx.moveTo(this.J.x + 18, this.J.y - 20);
    this.ctx.lineTo(this.J.x + 18, this.K.y + 20);
    this.ctx.moveTo(this.Q.x - 18, this.K.y + 20);
    this.ctx.lineTo(this.Q.x - 18, this.J.y - 20);
    this.ctx.moveTo(this.Q.x - 18, this.K.y - 20);
    this.ctx.closePath();
    this.ctx.stroke();
    this.J.visible = true;
    this.J.draw();
    this.K.visible = true;
    this.K.draw();
    this.C.visible = true;
    this.C.draw();
    this.Q.visible = true;
    return this.Q.draw();
  };

  return JK;

})();

RS = (function() {

  function RS(ctx, S, R, C, Q) {
    this.ctx = ctx;
    this.S = S;
    this.R = R;
    this.C = C;
    this.Q = Q != null ? Q : OFF;
    if (this.C.state) {
      if ((this.R.state === Z) || (this.S.state === Z) || (this.R.state === ON) && (this.S.state === ON)) {
        this.Q.state = Z;
      } else {
        this.Q.state = this.S.state;
      }
    }
  }

  RS.prototype.draw = function() {
    this.ctx.strokeStyle = '#000';
    this.ctx.lineWidth = 2;
    this.ctx.textAlign = 'center';
    this.ctx.strokeRect(this.S.x, this.S.y - 20, 60, 100);
    this.ctx.fillStyle = "#000";
    this.ctx.fillText("S", this.S.x + 10, this.S.y);
    this.ctx.fillText("R", this.R.x + 10, this.R.y);
    this.ctx.fillText("C", this.C.x + 10, this.C.y);
    this.ctx.fillText("Q", this.Q.x - 11, this.Q.y);
    this.ctx.fillText("RS", this.S.x + 30, this.C.y);
    this.ctx.lineWidth = 0.3;
    this.ctx.beginPath();
    this.ctx.moveTo(this.S.x + 18, this.S.y - 20);
    this.ctx.lineTo(this.S.x + 18, this.R.y + 20);
    this.ctx.moveTo(this.Q.x - 18, this.R.y + 20);
    this.ctx.lineTo(this.Q.x - 18, this.S.y - 20);
    this.ctx.moveTo(this.Q.x - 18, this.R.y - 20);
    this.ctx.closePath();
    this.ctx.stroke();
    this.S.visible = true;
    this.S.draw();
    this.R.visible = true;
    this.R.draw();
    this.C.visible = true;
    this.C.draw();
    this.Q.visible = true;
    return this.Q.draw();
  };

  return RS;

})();

BTRI = (function() {

  function BTRI(ctx, _in, oen, out) {
    this.ctx = ctx;
    this["in"] = _in;
    this.oen = oen;
    this.out = out;
    if ((this.oen.state === OFF) || (this.oen.state === Z)) {
      this.out.state = this["in"].state;
    } else {
      this.out.state = Z;
    }
  }

  BTRI.prototype.draw = function() {
    if (this.oen.state === Z) {
      this.ctx.fillStyle = ON.color;
      this.ctx.strokeStyle = Z.color;
    } else {
      this.ctx.fillStyle = this.oen.state === NOT ? ON.color : OFF.color;
      this.ctx.strokeStyle = this.ctx.fillStyle;
    }
    this.ctx.beginPath();
    this.ctx.lineWidth = 4;
    this.ctx.moveTo(this.oen.x, this.oen.y);
    this.ctx.lineTo(this["in"].x + 15, this["in"].y + 10);
    this.ctx.closePath();
    this.ctx.stroke();
    this.ctx.beginPath();
    this.ctx.lineWidth = 2;
    this.ctx.strokeStyle = '#000';
    this.ctx.moveTo(this["in"].x, this["in"].y);
    this.ctx.lineTo(this["in"].x, this["in"].y - 16);
    this.ctx.lineTo(this["in"].x + 30, this["in"].y);
    this.ctx.lineTo(this["in"].x, this["in"].y + 16);
    this.ctx.lineTo(this["in"].x, this["in"].y);
    this.ctx.closePath();
    this.ctx.moveTo(this["in"].x + 15, this["in"].y + 10);
    this.ctx.arc(this["in"].x + 15, this["in"].y + 10, 5, 0, Math.PI * 2, true);
    this.ctx.stroke();
    this.ctx.beginPath();
    this.ctx.arc(this["in"].x + 15, this["in"].y + 10, 4, 0, Math.PI * 2, true);
    this.ctx.closePath();
    this.ctx.fill();
    this["in"].visible = true;
    this["in"].draw();
    this.out.visible = true;
    this.out.draw();
    this.oen.visible = true;
    return this.oen.draw();
  };

  return BTRI;

})();

draw_text = function(ctx, x, y, text) {
  ctx.fillStyle = "#000";
  ctx.textAlign = 'left';
  return ctx.fillText(text, x, y);
};

clear = function(ctx) {
  return ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
};

example = function(ctx) {
  var el, elem, inputs, node, nodes, wire, wires, _i, _j, _k, _len, _len1, _len2, _results;
  wires = [];
  el = [];
  inputs = [ON, ON];
  nodes = [new Node(ctx, 50, 40), new Node(ctx, 100, 40), new Node(ctx, 153, 40), new Node(ctx, 210, 40), new Node(ctx, 50, 85), new Node(ctx, 170, 85, 1), new Node(ctx, 170, 70, 1), new Node(ctx, 210, 70), new Node(ctx, 270, 55), new Node(ctx, 320, 55)];
  el.push(new Input(ctx, nodes[0], inputs[0]));
  wires.push(new Wire(ctx, nodes[0], nodes[1]));
  el.push(new Not(ctx, nodes[1], nodes[2]));
  wires.push(new Wire(ctx, nodes[2], nodes[3]));
  el.push(new Input(ctx, nodes[4], inputs[1]));
  wires.push(new Wire(ctx, nodes[4], nodes[5]));
  wires.push(new Wire(ctx, nodes[5], nodes[6]));
  wires.push(new Wire(ctx, nodes[6], nodes[7]));
  el.push(new And(ctx, nodes[3], nodes[7], nodes[8]));
  wires.push(new Wire(ctx, nodes[8], nodes[9]));
  el.push(new Output(ctx, nodes[9]));
  clear(ctx);
  for (_i = 0, _len = wires.length; _i < _len; _i++) {
    wire = wires[_i];
    wire.draw();
  }
  for (_j = 0, _len1 = el.length; _j < _len1; _j++) {
    elem = el[_j];
    elem.draw();
  }
  _results = [];
  for (_k = 0, _len2 = nodes.length; _k < _len2; _k++) {
    node = nodes[_k];
    _results.push(node.draw());
  }
  return _results;
};

reload = function() {
  var ctx;
  ctx = document.getElementById('examples').getContext('2d');
  ctx.font = '11pt PT Sans';
  ctx.textBaseline = 'middle';
  example(ctx);
  return setTimeout("reload()", 1000);
};

reload();
